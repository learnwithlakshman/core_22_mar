<?xml version="1.0" encoding="UTF-8" standalone="yes"?><!DOCTYPE report PUBLIC "-//JACOCO//DTD Report 1.1//EN" "report.dtd"><report name="junit"><sessioninfo id="lwl-3b887677" start="1651717675144" dump="1651717677664"/><package name="com/careerit/junit/basics"><class name="com/careerit/junit/basics/FundamentalPrograms" sourcefilename="FundamentalPrograms.java"><method name="&lt;init&gt;" desc="()V" line="2"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="reverseOfNumber" desc="(I)I" line="6"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="sumOfDigits" desc="(I)I" line="11"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isPrime" desc="(I)Z" line="15"><counter type="INSTRUCTION" missed="7" covered="23"/><counter type="BRANCH" missed="4" covered="6"/><counter type="LINE" missed="2" covered="6"/><counter type="COMPLEXITY" missed="3" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nthFibonacciNumber" desc="(I)I" line="28"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isPalindrome" desc="(I)Z" line="33"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="countPrimes" desc="(II)I" line="38"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="17" covered="26"/><counter type="BRANCH" missed="4" covered="6"/><counter type="LINE" missed="7" covered="7"/><counter type="COMPLEXITY" missed="8" covered="4"/><counter type="METHOD" missed="5" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/careerit/junit/basics/NumberOperations" sourcefilename="NumberOperations.java"><method name="&lt;init&gt;" desc="()V" line="3"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="div" desc="(II)I" line="6"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="biggest" desc="(III)I" line="16"><counter type="INSTRUCTION" missed="1" covered="14"/><counter type="BRANCH" missed="2" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="2" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="1" covered="28"/><counter type="BRANCH" missed="2" covered="6"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="2" covered="5"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/careerit/junit/basics/StringPrograms" sourcefilename="StringPrograms.java"><method name="&lt;init&gt;" desc="()V" line="3"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isPalindrome" desc="(Ljava/lang/String;)Z" line="6"><counter type="INSTRUCTION" missed="2" covered="11"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="2"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subStringWithSizeN" desc="(Ljava/lang/String;I)[I" line="14"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="joinStrings" desc="([Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;" line="19"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="occurance" desc="([Ljava/lang/String;Ljava/lang/String;)I" line="25"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="sort" desc="([Ljava/lang/String;)[Ljava/lang/String;" line="31"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="countOfVowels" desc="(Ljava/lang/String;)I" line="36"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getWordCount" desc="(Ljava/lang/String;)I" line="41"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="covertToBinaryString" desc="([I)[Ljava/lang/String;" line="47"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="encode" desc="(Ljava/lang/String;)Ljava/lang/String;" line="52"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="18" covered="14"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="9" covered="3"/><counter type="COMPLEXITY" missed="9" covered="2"/><counter type="METHOD" missed="8" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/careerit/junit/basics/ArraysPrograms" sourcefilename="ArraysPrograms.java"><method name="&lt;init&gt;" desc="()V" line="2"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="maxElement" desc="([I)I" line="6"><counter type="INSTRUCTION" missed="27" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="sumOfElement" desc="([I)J" line="17"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="search" desc="([II)Z" line="22"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="sort" desc="([ILjava/lang/String;)[I" line="27"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="generateNPrimeNumbers" desc="(I)[I" line="33"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isSubSet" desc="([I[I)Z" line="38"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="maxSumRow" desc="([[I)[I" line="48"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="49" covered="0"/><counter type="BRANCH" missed="6" covered="0"/><counter type="LINE" missed="14" covered="0"/><counter type="COMPLEXITY" missed="11" covered="0"/><counter type="METHOD" missed="8" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><sourcefile name="StringPrograms.java"><line nr="3" mi="0" ci="3" mb="0" cb="0"/><line nr="6" mi="0" ci="2" mb="1" cb="1"/><line nr="7" mi="0" ci="9" mb="0" cb="0"/><line nr="9" mi="2" ci="0" mb="0" cb="0"/><line nr="14" mi="2" ci="0" mb="0" cb="0"/><line nr="19" mi="2" ci="0" mb="0" cb="0"/><line nr="25" mi="2" ci="0" mb="0" cb="0"/><line nr="31" mi="2" ci="0" mb="0" cb="0"/><line nr="36" mi="2" ci="0" mb="0" cb="0"/><line nr="41" mi="2" ci="0" mb="0" cb="0"/><line nr="47" mi="2" ci="0" mb="0" cb="0"/><line nr="52" mi="2" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="18" covered="14"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="9" covered="3"/><counter type="COMPLEXITY" missed="9" covered="2"/><counter type="METHOD" missed="8" covered="2"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="ArraysPrograms.java"><line nr="2" mi="3" ci="0" mb="0" cb="0"/><line nr="6" mi="4" ci="0" mb="0" cb="0"/><line nr="7" mi="16" ci="0" mb="2" cb="0"/><line nr="8" mi="3" ci="0" mb="2" cb="0"/><line nr="9" mi="2" ci="0" mb="0" cb="0"/><line nr="12" mi="2" ci="0" mb="0" cb="0"/><line nr="17" mi="2" ci="0" mb="0" cb="0"/><line nr="22" mi="2" ci="0" mb="0" cb="0"/><line nr="27" mi="2" ci="0" mb="0" cb="0"/><line nr="33" mi="2" ci="0" mb="0" cb="0"/><line nr="38" mi="5" ci="0" mb="2" cb="0"/><line nr="39" mi="2" ci="0" mb="0" cb="0"/><line nr="42" mi="2" ci="0" mb="0" cb="0"/><line nr="48" mi="2" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="49" covered="0"/><counter type="BRANCH" missed="6" covered="0"/><counter type="LINE" missed="14" covered="0"/><counter type="COMPLEXITY" missed="11" covered="0"/><counter type="METHOD" missed="8" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="FundamentalPrograms.java"><line nr="2" mi="0" ci="3" mb="0" cb="0"/><line nr="6" mi="2" ci="0" mb="0" cb="0"/><line nr="11" mi="2" ci="0" mb="0" cb="0"/><line nr="15" mi="0" ci="2" mb="0" cb="2"/><line nr="16" mi="0" ci="2" mb="0" cb="0"/><line nr="17" mi="3" ci="4" mb="3" cb="1"/><line nr="18" mi="2" ci="0" mb="0" cb="0"/><line nr="19" mi="0" ci="9" mb="0" cb="2"/><line nr="20" mi="0" ci="4" mb="1" cb="1"/><line nr="21" mi="2" ci="0" mb="0" cb="0"/><line nr="23" mi="0" ci="2" mb="0" cb="0"/><line nr="28" mi="2" ci="0" mb="0" cb="0"/><line nr="33" mi="2" ci="0" mb="0" cb="0"/><line nr="38" mi="2" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="17" covered="26"/><counter type="BRANCH" missed="4" covered="6"/><counter type="LINE" missed="7" covered="7"/><counter type="COMPLEXITY" missed="8" covered="4"/><counter type="METHOD" missed="5" covered="2"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="NumberOperations.java"><line nr="3" mi="0" ci="3" mb="0" cb="0"/><line nr="6" mi="0" ci="2" mb="0" cb="2"/><line nr="7" mi="0" ci="4" mb="0" cb="0"/><line nr="8" mi="0" ci="5" mb="0" cb="0"/><line nr="16" mi="1" ci="14" mb="2" cb="4"/><counter type="INSTRUCTION" missed="1" covered="28"/><counter type="BRANCH" missed="2" covered="6"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="2" covered="5"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><counter type="INSTRUCTION" missed="85" covered="68"/><counter type="BRANCH" missed="13" covered="13"/><counter type="LINE" missed="30" covered="15"/><counter type="COMPLEXITY" missed="30" covered="11"/><counter type="METHOD" missed="21" covered="7"/><counter type="CLASS" missed="1" covered="3"/></package><counter type="INSTRUCTION" missed="85" covered="68"/><counter type="BRANCH" missed="13" covered="13"/><counter type="LINE" missed="30" covered="15"/><counter type="COMPLEXITY" missed="30" covered="11"/><counter type="METHOD" missed="21" covered="7"/><counter type="CLASS" missed="1" covered="3"/></report>